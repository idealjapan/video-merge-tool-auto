name: Process Disapproved Ads (Fast)

on:
  # ÊâãÂãïÂÆüË°å
  workflow_dispatch:
  
  # „Çπ„Ç±„Ç∏„É•„Éº„É´ÂÆüË°å: 50ÂàÜ„Åî„Å®
  schedule:
    - cron: '0,50 * * * *'  # UTCÊôÇÈñì„ÅßÊØéÊôÇ0ÂàÜ„Å®50ÂàÜ„Å´ÂÆüË°å

jobs:
  process:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python with cache
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'  # pip„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÊúâÂäπÂåñ
      
      - name: Install minimal dependencies for check
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth
      
      - name: Setup credentials for check
        run: |
          mkdir -p credentials
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}' > credentials/google_service_account.json
      
      - name: Quick check for disapproved ads
        id: check
        env:
          GOOGLE_APPLICATION_CREDENTIALS: credentials/google_service_account.json
        run: |
          echo "üîç Checking for disapproved ads..."
          python3 << 'EOF'
          import sys
          import os
          sys.path.insert(0, os.getcwd())
          try:
              from automation.approval_status_reader import ApprovalStatusReader
              reader = ApprovalStatusReader()
              ads = reader.get_disapproved_ads()
              
              # „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„ÅØapproval_status_readerÂÜÖ„ÅßÂÆüÊñΩÊ∏à„Åø
              # (DGÂ∫ÉÂëä„Å®CPÁä∂ÊÖãremoved/paused„ÅØËá™ÂãïÁöÑ„Å´Èô§Â§ñ„Åï„Çå„Çã)
              
              count = len(ads)
              print(f"Found {count} disapproved ads (after filtering)")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"count={count}\n")
                  f.write(f"has_ads={'true' if count > 0 else 'false'}\n")
              if count == 0:
                  print("‚úÖ No disapproved ads. Exiting early to save time.")
                  sys.exit(0)
          except Exception as e:
              print(f"Error during check: {e}")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("has_ads=false\n")
              sys.exit(0)
          EOF
      
      # ‰ª•‰∏ã„ÅØ‰∏çÊâøË™çÂ∫ÉÂëä„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂÆüË°å
      - name: Install full dependencies
        if: steps.check.outputs.has_ads == 'true'
        run: |
          pip install -r requirements.txt
          
          # ffmpeg„Å®Êó•Êú¨Ë™û„Éï„Ç©„É≥„Éà„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÂøÖË¶Å„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg fonts-noto-cjk
      
      - name: Setup all credentials
        if: steps.check.outputs.has_ads == 'true'
        run: |
          echo "${{ secrets.TOKEN_NB_PICKLE }}" | base64 -d > credentials/token_NB.pickle
          echo "${{ secrets.TOKEN_OM_PICKLE }}" | base64 -d > credentials/token_OM.pickle
          echo "${{ secrets.TOKEN_SBC_PICKLE }}" | base64 -d > credentials/token_SBC.pickle
          echo '${{ secrets.CLIENT_SECRETS_JSON }}' > credentials/client_secrets.json
      
      - name: Create output directories
        if: steps.check.outputs.has_ads == 'true'
        run: |
          mkdir -p ad-videos outputs logs
      
      - name: Process disapproved ads
        if: steps.check.outputs.has_ads == 'true'
        timeout-minutes: 15
        env:
          GOOGLE_APPLICATION_CREDENTIALS: credentials/google_service_account.json
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        run: |
          echo "üöÄ Processing ${{ steps.check.outputs.count }} disapproved ads..."
          python3 production_disapproval_handler.py
          echo "‚úÖ Processing complete"
      
      - name: Upload logs if failed
        if: failure() && steps.check.outputs.has_ads == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            logs/
            *.log
          retention-days: 7